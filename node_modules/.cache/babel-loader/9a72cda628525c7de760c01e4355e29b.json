{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/oda/Documents/development/Twitter-viz/src/components/ChoroplethMap/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport { useRecoilState } from \"recoil\";\nimport { selectedPrefectureState } from \"../../atoms\";\nexport default function ChoroplethMap({\n  crimeData\n}) {\n  _s();\n\n  const [features, setFeatures] = useState([]);\n  const [selectedPrefecture, setSelectedPrefecture] = useRecoilState(selectedPrefectureState);\n  const mapDataUrl = `${process.env.PUBLIC_URL}/data/japan.json`;\n  const width = 1000; //描画幅\n\n  const height = 800; //描画高さ\n\n  const centerPos = [137.0, 38.2]; // 地図のセンター位置\n\n  const scale = 1000; // 地図のスケール\n  //地図の描画時の設定\n\n  const projection = d3.geoMercator().center(centerPos).translate([width / 2, height / 2]).scale(scale); //地図をpathに変換\n\n  const path = d3.geoPath().projection(projection);\n  const color = d3.scaleLinear().domain(d3.extent(features, feature => feature.properties.value)).range([\"#ccc\", \"#f00\"]); // SVG要素を追加\n\n  const svg = d3.select(`#map-container`).append(`svg`).attr(`viewBox`, `0 0 ${width} ${height}`).attr(`width`, `100%`).attr(`height`, `100%`);\n\n  function PrefectureWrap({\n    children,\n    feature\n  }) {\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      transform: `${feature.properties.nam_ja === \"北海道\" ? \"translate(-600, 300)\" : \"\"}${feature.properties.nam_ja === \"沖縄県\" ? \"translate(900, -400)\" : \"\"}`,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n\n  function moveToEndAtIndex(arr, index) {\n    return [...arr.slice(0, index), ...arr.slice(index + 1), ...arr.slice(index, index + 1)];\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      children: /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: \"translate(200,300)\",\n        children: features.map((feature, i) => {\n          return /*#__PURE__*/_jsxDEV(PrefectureWrap, {\n            feature: feature,\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              d: path(feature),\n              fill: color(feature.properties.value),\n              stroke: `${selectedPrefecture === feature.properties.nam_ja ? \"black\" : \"white\"}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChoroplethMap, \"eFfLhEWwtCBrZrMGmSIvlS01r4g=\", false, function () {\n  return [useRecoilState];\n});\n\n_c = ChoroplethMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChoroplethMap\");","map":{"version":3,"sources":["/Users/oda/Documents/development/Twitter-viz/src/components/ChoroplethMap/index.js"],"names":["React","useEffect","useState","d3","topojson","useRecoilState","selectedPrefectureState","ChoroplethMap","crimeData","features","setFeatures","selectedPrefecture","setSelectedPrefecture","mapDataUrl","process","env","PUBLIC_URL","width","height","centerPos","scale","projection","geoMercator","center","translate","path","geoPath","color","scaleLinear","domain","extent","feature","properties","value","range","svg","select","append","attr","PrefectureWrap","children","nam_ja","moveToEndAtIndex","arr","index","slice","map","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport { useRecoilState } from \"recoil\";\nimport { selectedPrefectureState } from \"../../atoms\";\n\nexport default function ChoroplethMap({ crimeData }) {\n  const [features, setFeatures] = useState([]);\n  const [selectedPrefecture, setSelectedPrefecture] = useRecoilState(\n    selectedPrefectureState\n  );\n\n  const mapDataUrl = `${process.env.PUBLIC_URL}/data/japan.json`;\n\n  const width = 1000;//描画幅\n  const height = 800;//描画高さ\n  const centerPos = [137.0, 38.2]; // 地図のセンター位置\n  const scale = 1000; // 地図のスケール\n\n  //地図の描画時の設定\n  const projection = d3\n    .geoMercator()\n    .center(centerPos)\n    .translate([width/2, height/2])\n    .scale(scale);\n\n  //地図をpathに変換\n  const path = d3.geoPath().projection(projection);\n\n  const color = d3\n    .scaleLinear()\n    .domain(d3.extent(features, (feature) => feature.properties.value))\n    .range([\"#ccc\", \"#f00\"]);\n\n  // SVG要素を追加\n  const svg = d3\n    .select(`#map-container`)\n    .append(`svg`)\n    .attr(`viewBox`, `0 0 ${width} ${height}`)\n    .attr(`width`, `100%`)\n    .attr(`height`, `100%`);\n\n  function PrefectureWrap({ children, feature }) {\n    return (\n      <g\n        transform={`${\n          feature.properties.nam_ja === \"北海道\" ? \"translate(-600, 300)\" : \"\"\n        }${\n          feature.properties.nam_ja === \"沖縄県\" ? \"translate(900, -400)\" : \"\"\n        }`}\n      >\n        {children}\n      </g>\n    );\n  }\n\n  function moveToEndAtIndex(arr, index) {\n    return [\n      ...arr.slice(0, index),\n      ...arr.slice(index + 1),\n      ...arr.slice(index, index + 1),\n    ];\n  }\n\n  return (\n    <div className=\"container mx\">\n      <svg width={width} height={height}>\n        <g transform=\"translate(200,300)\">\n          {features.map((feature, i) => {\n            return (\n              <PrefectureWrap feature={feature}>\n                <path\n                  d={path(feature)}\n                  fill={color(feature.properties.value)}\n                  stroke={`${\n                    selectedPrefecture === feature.properties.nam_ja\n                      ? \"black\"\n                      : \"white\"\n                  }`}\n                />\n              </PrefectureWrap>\n            );\n          })}\n        </g>\n      </svg>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}