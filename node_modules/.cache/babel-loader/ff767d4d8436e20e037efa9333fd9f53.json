{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/oda/Documents/development/Twitter-viz/src/ChoroplethMap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport Japandata from \"./japanpos.json\";\n\nconst ChoroplethMap = ({\n  features\n}) => {\n  const width = 1800;\n  const height = 1000;\n  const projection = d3.geoMercator().scale(2000).center([142.69167, 40.68944]);\n  const path = d3.geoPath().projection(projection);\n  const datas = Japandata.data;\n  let x_pos, y_pos;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      children: /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [features.map((feature, i) => {\n          return /*#__PURE__*/_jsxDEV(\"path\", {\n            d: path(feature),\n            fill: \"blue\",\n            stroke: \"white\"\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 15\n          }, this);\n        }), datas.map((item, i) => {\n          x_pos = projection([item.lat, item.lng])[0];\n          y_pos = projection([item.lat, item.lng])[1];\n          console.log(projection([item.lat, item.lng]));\n          return /*#__PURE__*/_jsxDEV(\"text\", {\n            x: x_pos,\n            y: y_pos,\n            fill: \"red\",\n            \"font-fontFamily\": \"Verdana\",\n            fontSize: \"20\",\n            children: \"\\u30C6\\u30B9\\u30C8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ChoroplethMap;\nexport default function ChoroplethMapPage() {\n  _s();\n\n  const [features, setFeatures] = useState(null);\n  useEffect(() => {\n    (async () => {\n      const res = await fetch(`${process.env.PUBLIC_URL}./data/japan.json`);\n      const data = await res.json();\n      const {\n        features\n      } = topojson.feature(data, data.objects.japan);\n      setFeatures(features);\n    })();\n  }, []);\n\n  if (features == null) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChoroplethMap, {\n    features: features\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 10\n  }, this);\n}\n\n_s(ChoroplethMapPage, \"87MfhyococWanik7P11aI1QXipM=\");\n\n_c2 = ChoroplethMapPage;\n;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChoroplethMap\");\n$RefreshReg$(_c2, \"ChoroplethMapPage\");","map":{"version":3,"sources":["/Users/oda/Documents/development/Twitter-viz/src/ChoroplethMap.js"],"names":["React","useEffect","useState","d3","topojson","Japandata","ChoroplethMap","features","width","height","projection","geoMercator","scale","center","path","geoPath","datas","data","x_pos","y_pos","map","feature","i","item","lat","lng","console","log","ChoroplethMapPage","setFeatures","res","fetch","process","env","PUBLIC_URL","json","objects","japan"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport Japandata from \"./japanpos.json\";\n\nconst ChoroplethMap = ({ features }) => {\n  const width = 1800;\n  const height = 1000;\n  const projection = d3\n    .geoMercator()\n    .scale(2000)\n    .center([142.69167, 40.68944]);\n\n  const path = d3.geoPath().projection(projection);\n  \n  const datas = Japandata.data;\n  let x_pos,y_pos;\n\n  return (\n    <div>\n      <svg width={width} height={height}>\n        <g>\n          {features.map((feature, i) => {\n            return(\n              <path key={i} d={path(feature)} fill=\"blue\" stroke=\"white\" />\n            );\n          })}\n\n          {datas.map((item , i) => {\n            x_pos = projection([item.lat,item.lng])[0];\n            y_pos = projection([item.lat,item.lng])[1];\n            console.log(projection([item.lat,item.lng]));\n            return(\n              <text \n                x={x_pos} \n                y={y_pos}\n                fill=\"red\"\n                font-fontFamily=\"Verdana\"\n                fontSize=\"20\"\n              >テスト</text>\n            )\n          })}\n        </g>\n      </svg>\n    </div>\n  );\n};\nexport default function ChoroplethMapPage() {\n  const [features, setFeatures] = useState(null);\n  useEffect(() => {\n    (async() => {\n      const res = await fetch(`${process.env.PUBLIC_URL}./data/japan.json`)\n      const data = await res.json()\n      const { features } = topojson.feature(data, data.objects.japan);\n      setFeatures(features);\n    })()\n  },[])\n  if (features == null) {\n    return <p>loading</p>;\n  }\n  return <ChoroplethMap features={features} />;\n};"]},"metadata":{},"sourceType":"module"}