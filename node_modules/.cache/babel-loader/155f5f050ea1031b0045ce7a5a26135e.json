{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/oda/Documents/development/Twitter-viz/src/components/ChoroplethMap/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport { useRecoilState } from \"recoil\";\nimport { selectedPrefectureState } from \"../../atoms\";\nexport default function ChoroplethMap({\n  crimeData\n}) {\n  _s();\n\n  const [features, setFeatures] = useState([]);\n  const [selectedPrefecture, setSelectedPrefecture] = useRecoilState(selectedPrefectureState);\n  const mapDataUrl = `${process.env.PUBLIC_URL}/data/japan.json`;\n  const width = 1000;\n  const height = 500 * 2;\n  const projection = d3.geoMercator().scale(3000).center([139.69167, 35.68944]);\n  const path = d3.geoPath().projection(projection);\n  const color = d3.scaleLinear().domain(d3.extent(features, feature => feature.properties.value)).range([\"#ccc\", \"#f00\"]);\n  useEffect(() => {\n    async function loadMapData(dataUrl) {\n      const res = await fetch(dataUrl);\n      const data = await res.json();\n      const {\n        features\n      } = topojson.feature(data, data.objects.japan);\n      setFeatures(features);\n    }\n\n    loadMapData(mapDataUrl);\n  }, []);\n  console.log(selectedPrefecture);\n\n  function PrefectureWrap({\n    children,\n    feature\n  }) {\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      transform: `${feature.properties.nam_ja === \"北海道\" ? \"translate(-600, 300)\" : \"\"}${feature.properties.nam_ja === \"沖縄県\" ? \"translate(900, -400)\" : \"\"}`,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n\n  function moveToEndAtIndex(arr, index) {\n    return [...arr.slice(0, index), ...arr.slice(index + 1), ...arr.slice(index, index + 1)];\n  }\n\n  if (features === null || crimeData === null) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 12\n    }, this);\n  }\n\n  console.log(features);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      children: /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: \"translate(200,300)\",\n        children: features.map((feature, i) => {\n          return /*#__PURE__*/_jsxDEV(PrefectureWrap, {\n            feature: feature,\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              d: path(feature),\n              fill: color(feature.properties.value),\n              stroke: `${selectedPrefecture === feature.properties.nam_ja ? \"black\" : \"white\"}`,\n              onClick: () => {\n                setSelectedPrefecture(feature.properties.nam_ja);\n                setFeatures(prev => moveToEndAtIndex(prev, i));\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChoroplethMap, \"NGlBalWbO5Qc3wmVeVR/9Itj8PE=\", false, function () {\n  return [useRecoilState];\n});\n\n_c = ChoroplethMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChoroplethMap\");","map":{"version":3,"sources":["/Users/oda/Documents/development/Twitter-viz/src/components/ChoroplethMap/index.js"],"names":["React","useEffect","useState","d3","topojson","useRecoilState","selectedPrefectureState","ChoroplethMap","crimeData","features","setFeatures","selectedPrefecture","setSelectedPrefecture","mapDataUrl","process","env","PUBLIC_URL","width","height","projection","geoMercator","scale","center","path","geoPath","color","scaleLinear","domain","extent","feature","properties","value","range","loadMapData","dataUrl","res","fetch","data","json","objects","japan","console","log","PrefectureWrap","children","nam_ja","moveToEndAtIndex","arr","index","slice","map","i","prev"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport { useRecoilState } from \"recoil\";\nimport { selectedPrefectureState } from \"../../atoms\";\n\nexport default function ChoroplethMap({ crimeData }) {\n  const [features, setFeatures] = useState([]);\n  const [selectedPrefecture, setSelectedPrefecture] = useRecoilState(\n    selectedPrefectureState\n  );\n\n  const mapDataUrl = `${process.env.PUBLIC_URL}/data/japan.json`;\n\n  const width = 1000;\n  const height = 500 * 2;\n  const projection = d3.geoMercator().scale(3000).center([139.69167, 35.68944]);\n  const path = d3.geoPath().projection(projection);\n  const color = d3\n    .scaleLinear()\n    .domain(d3.extent(features, (feature) => feature.properties.value))\n    .range([\"#ccc\", \"#f00\"]);\n\n  useEffect(() => {\n    async function loadMapData(dataUrl) {\n      const res = await fetch(dataUrl);\n      const data = await res.json();\n\n      const { features } = topojson.feature(data, data.objects.japan);\n\n      setFeatures(features);\n    }\n\n    loadMapData(mapDataUrl);\n  }, []);\n\n  console.log(selectedPrefecture);\n\n  function PrefectureWrap({ children, feature }) {\n    return (\n      <g\n        transform={`${\n          feature.properties.nam_ja === \"北海道\" ? \"translate(-600, 300)\" : \"\"\n        }${\n          feature.properties.nam_ja === \"沖縄県\" ? \"translate(900, -400)\" : \"\"\n        }`}\n      >\n        {children}\n      </g>\n    );\n  }\n\n  function moveToEndAtIndex(arr, index) {\n    return [\n      ...arr.slice(0, index),\n      ...arr.slice(index + 1),\n      ...arr.slice(index, index + 1),\n    ];\n  }\n\n  if (features === null || crimeData === null) {\n    return <p>loading</p>;\n  }\n\n  console.log(features);\n\n  return (\n    <div className=\"container mx\">\n      <svg width={width} height={height}>\n        <g transform=\"translate(200,300)\">\n          {features.map((feature, i) => {\n            return (\n              <PrefectureWrap feature={feature}>\n                <path\n                  d={path(feature)}\n                  fill={color(feature.properties.value)}\n                  stroke={`${\n                    selectedPrefecture === feature.properties.nam_ja\n                      ? \"black\"\n                      : \"white\"\n                  }`}\n                  onClick={() => {\n                    setSelectedPrefecture(feature.properties.nam_ja);\n                    setFeatures((prev) => moveToEndAtIndex(prev, i));\n                  }}\n                />\n              </PrefectureWrap>\n            );\n          })}\n        </g>\n      </svg>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}