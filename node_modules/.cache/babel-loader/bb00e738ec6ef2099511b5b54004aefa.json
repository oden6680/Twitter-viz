{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/oda/Documents/development/Twitter-viz/src/ChoroplethMap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport Japandata from \"./japanpos.json\";\n\nconst ChoroplethMap = ({\n  features,\n  now\n}) => {\n  const width = 2000;\n  const height = 800;\n  const projection = d3.geoMercator().scale(1500).center([139.69167, 35.68944]);\n  const path = d3.geoPath().projection(projection);\n  const color = d3.scaleLinear().domain(d3.extent(features, feature => feature.properties.value)).range([\"#ccc\", \"#f00\"]);\n  const datas = Japandata;\n  let x_pos, y_pos;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      children: /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: \"translate(500,100)\",\n        children: [features.map((feature, i) => {\n          return /*#__PURE__*/_jsxDEV(\"path\", {\n            d: path(feature),\n            fill: \"blue\",\n            stroke: \"white\"\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 15\n          }, this);\n        }), datas.data.map(item => {\n          x_pos = projection([item.lng, item.lat])[0];\n          y_pos = projection([item.lng, item.lat])[1];\n          return /*#__PURE__*/_jsxDEV(\"text\", {\n            x: x_pos,\n            y: y_pos,\n            fill: \"red\",\n            children: \"\\u30C6\\u30B9\\u30C8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ChoroplethMap;\nexport default function ChoroplethMapPage() {\n  _s();\n\n  const [features, setFeatures] = useState(null);\n  useEffect(() => {\n    (async () => {\n      const res = await fetch(`${process.env.PUBLIC_URL}./data/japan.json`);\n      const data = await res.json();\n      const {\n        features\n      } = topojson.feature(data, data.objects.japan);\n      setFeatures(features);\n    })();\n  }, []);\n\n  if (features == null) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChoroplethMap, {\n    features: features\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 10\n  }, this);\n}\n\n_s(ChoroplethMapPage, \"87MfhyococWanik7P11aI1QXipM=\");\n\n_c2 = ChoroplethMapPage;\n;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChoroplethMap\");\n$RefreshReg$(_c2, \"ChoroplethMapPage\");","map":{"version":3,"sources":["/Users/oda/Documents/development/Twitter-viz/src/ChoroplethMap.js"],"names":["React","useEffect","useState","d3","topojson","Japandata","ChoroplethMap","features","now","width","height","projection","geoMercator","scale","center","path","geoPath","color","scaleLinear","domain","extent","feature","properties","value","range","datas","x_pos","y_pos","map","i","data","item","lng","lat","ChoroplethMapPage","setFeatures","res","fetch","process","env","PUBLIC_URL","json","objects","japan"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport Japandata from \"./japanpos.json\";\n\nconst ChoroplethMap = ({ features, now }) => {\n  const width = 2000;\n  const height = 800;\n  const projection = d3.geoMercator().scale(1500).center([139.69167, 35.68944]);\n  const path = d3.geoPath().projection(projection);\n  const color = d3\n    .scaleLinear()\n    .domain(d3.extent(features, (feature) => feature.properties.value))\n    .range([\"#ccc\", \"#f00\"]);\n  \n  const datas = Japandata;\n  let x_pos,y_pos;\n  return (\n    <div>\n      <svg width={width} height={height}>\n        <g transform=\"translate(500,100)\">\n          {features.map((feature, i) => {\n            return(\n              <path key={i} d={path(feature)} fill=\"blue\" stroke=\"white\" />\n            );\n          })}\n\n          {datas.data.map((item) => {\n            x_pos = projection([item.lng,item.lat])[0];\n            y_pos = projection([item.lng,item.lat])[1];\n            return(\n              <text \n                x={x_pos} \n                y={y_pos}\n                fill=\"red\"\n              >\n                 テスト\n              </text>\n            )\n          })}\n        </g>\n      </svg>\n    </div>\n  );\n};\nexport default function ChoroplethMapPage() {\n  const [features, setFeatures] = useState(null);\n  useEffect(() => {\n    (async() => {\n      const res = await fetch(`${process.env.PUBLIC_URL}./data/japan.json`)\n      const data = await res.json()\n      const { features } = topojson.feature(data, data.objects.japan);\n      setFeatures(features);\n    })()\n  },[])\n  if (features == null) {\n    return <p>loading</p>;\n  }\n  return <ChoroplethMap features={features} />;\n};"]},"metadata":{},"sourceType":"module"}