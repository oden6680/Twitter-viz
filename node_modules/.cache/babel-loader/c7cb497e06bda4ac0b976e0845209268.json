{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/oda/Documents/development/Twitter-viz/src/components/ChoroplethMap/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nexport default function ChoroplethMap({\n  crimeData\n}) {\n  _s();\n\n  const [features, setFeatures] = useState([]);\n  const mapDataUrl = `${process.env.PUBLIC_URL}/data/japan.json`;\n  const width = 1000;\n  const height = 1000;\n  const projection = d3.geoMercator().scale(2000).center([139.69167, 35.68944]);\n  const path = d3.geoPath().projection(projection);\n  const color = d3.scaleLinear().domain(d3.extent(features, feature => feature.properties.value)).range([\"#ccc\", \"#f00\"]);\n  useEffect(() => {\n    async function loadMapData(dataUrl) {\n      const res = await fetch(dataUrl);\n      const data = await res.json();\n      const {\n        features\n      } = topojson.feature(data, data.objects.japan);\n      setFeatures(features);\n    }\n\n    loadMapData(mapDataUrl);\n  }, []);\n\n  function PrefectureWrap({\n    children,\n    feature\n  }) {\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      transform: `${feature.properties.nam_ja === \"沖縄県\" ? \"translate(300, -800)\" : \"\"}`,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width * 2,\n      height: height * 2,\n      children: /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: \"translate(300,500)\",\n        children: features.map(feature => {\n          return /*#__PURE__*/_jsxDEV(PrefectureWrap, {\n            feature: feature,\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              d: path(feature),\n              fill: color(\"000000\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChoroplethMap, \"ypOwFX/TV9+PVMCBxfFaLZXumhg=\");\n\n_c = ChoroplethMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChoroplethMap\");","map":{"version":3,"sources":["/Users/oda/Documents/development/Twitter-viz/src/components/ChoroplethMap/index.js"],"names":["React","useEffect","useState","d3","topojson","ChoroplethMap","crimeData","features","setFeatures","mapDataUrl","process","env","PUBLIC_URL","width","height","projection","geoMercator","scale","center","path","geoPath","color","scaleLinear","domain","extent","feature","properties","value","range","loadMapData","dataUrl","res","fetch","data","json","objects","japan","PrefectureWrap","children","nam_ja","map"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AAEA,eAAe,SAASC,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAAsC;AAAA;;AACnD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAMO,UAAU,GAAI,GAAEC,OAAO,CAACC,GAAR,CAAYC,UAAW,kBAA7C;AAEA,QAAMC,KAAK,GAAG,IAAd;AACA,QAAMC,MAAM,GAAG,IAAf;AACA,QAAMC,UAAU,GAAGZ,EAAE,CAACa,WAAH,GAAiBC,KAAjB,CAAuB,IAAvB,EAA6BC,MAA7B,CAAoC,CAAC,SAAD,EAAY,QAAZ,CAApC,CAAnB;AACA,QAAMC,IAAI,GAAGhB,EAAE,CAACiB,OAAH,GAAaL,UAAb,CAAwBA,UAAxB,CAAb;AACA,QAAMM,KAAK,GAAGlB,EAAE,CACbmB,WADW,GAEXC,MAFW,CAEJpB,EAAE,CAACqB,MAAH,CAAUjB,QAAV,EAAqBkB,OAAD,IAAaA,OAAO,CAACC,UAAR,CAAmBC,KAApD,CAFI,EAGXC,KAHW,CAGL,CAAC,MAAD,EAAS,MAAT,CAHK,CAAd;AAKA3B,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAe4B,WAAf,CAA2BC,OAA3B,EAAoC;AAClC,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAACF,OAAD,CAAvB;AACA,YAAMG,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEA,YAAM;AAAE3B,QAAAA;AAAF,UAAeH,QAAQ,CAACqB,OAAT,CAAiBQ,IAAjB,EAAuBA,IAAI,CAACE,OAAL,CAAaC,KAApC,CAArB;AAEA5B,MAAAA,WAAW,CAACD,QAAD,CAAX;AACD;;AAEDsB,IAAAA,WAAW,CAACpB,UAAD,CAAX;AACD,GAXQ,EAWN,EAXM,CAAT;;AAcA,WAAS4B,cAAT,CAAwB;AAAEC,IAAAA,QAAF;AAAYb,IAAAA;AAAZ,GAAxB,EAA+C;AAC7C,wBACE;AACE,MAAA,SAAS,EAAG,GACVA,OAAO,CAACC,UAAR,CAAmBa,MAAnB,KAA8B,KAA9B,GAAsC,sBAAtC,GAA+D,EAChE,EAHH;AAAA,gBAKGD;AALH;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AAGD,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,2BACE;AAAK,MAAA,KAAK,EAAEzB,KAAK,GAAC,CAAlB;AAAqB,MAAA,MAAM,EAAEC,MAAM,GAAC,CAApC;AAAA,6BACE;AAAG,QAAA,SAAS,EAAC,oBAAb;AAAA,kBACGP,QAAQ,CAACiC,GAAT,CAAcf,OAAD,IAAa;AACzB,8BACE,QAAC,cAAD;AAAgB,YAAA,OAAO,EAAEA,OAAzB;AAAA,mCACE;AACE,cAAA,CAAC,EAAEN,IAAI,CAACM,OAAD,CADT;AAEE,cAAA,IAAI,EAAEJ,KAAK,CAAC,QAAD;AAFb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF;AAQD,SATA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GA3DuBhB,a;;KAAAA,a","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\n\nexport default function ChoroplethMap({ crimeData }) {\n  const [features, setFeatures] = useState([]);\n\n  const mapDataUrl = `${process.env.PUBLIC_URL}/data/japan.json`;\n\n  const width = 1000;\n  const height = 1000;\n  const projection = d3.geoMercator().scale(2000).center([139.69167, 35.68944]);\n  const path = d3.geoPath().projection(projection);\n  const color = d3\n    .scaleLinear()\n    .domain(d3.extent(features, (feature) => feature.properties.value))\n    .range([\"#ccc\", \"#f00\"]);\n\n  useEffect(() => {\n    async function loadMapData(dataUrl) {\n      const res = await fetch(dataUrl);\n      const data = await res.json();\n\n      const { features } = topojson.feature(data, data.objects.japan);\n\n      setFeatures(features);\n    }\n\n    loadMapData(mapDataUrl);\n  }, []);\n\n\n  function PrefectureWrap({ children, feature }) {\n    return (\n      <g\n        transform={`${\n          feature.properties.nam_ja === \"沖縄県\" ? \"translate(300, -800)\" : \"\"\n        }`}\n      >\n        {children}\n      </g>\n    );\n  }\n\n\n  return (\n    <div className=\"container mx\">\n      <svg width={width*2} height={height*2}>\n        <g transform=\"translate(300,500)\">\n          {features.map((feature) => {\n            return (\n              <PrefectureWrap feature={feature}>\n                <path\n                  d={path(feature)}\n                  fill={color(\"000000\")}\n                />\n              </PrefectureWrap>\n            );\n          })}\n        </g>\n      </svg>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}