{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/oda/Documents/development/Twitter-viz/src/components/Map/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport Japandata from \"../../../public/data/japanpos.json\";\nimport transitions from \"@material-ui/core/styles/transitions\";\n\nconst ChoroplethMap = ({\n  features\n}) => {\n  const width = 2000;\n  const height = 800;\n  const projection = d3.geoMercator().scale(1500).center([139.69167, 35.68944]);\n  const path = d3.geoPath().projection(projection);\n  const color = d3.scaleLinear().domain(d3.extent(features, feature => feature.properties.value)).range([\"#ccc\", \"#f00\"]);\n  const datas = Japandata;\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: width,\n    height: height,\n    children: /*#__PURE__*/_jsxDEV(\"g\", {\n      transform: \"translate(500,100)\",\n      children: [features.map((feature, i) => /*#__PURE__*/_jsxDEV(\"path\", {\n        d: path(feature),\n        fill: color(\"000000\"),\n        stroke: \"white\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this)), datas.map(i => /*#__PURE__*/_jsxDEV(\"text\", {\n        x: projection([datas.data[i].lat, datas.data[i].lng])[0],\n        y: projection([datas.data[i].lat, datas.data[i].lng])[1],\n        children: \"\\u30C6\\u30B9\\u30C8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ChoroplethMap;\nexport default function ChoroplethMapPage() {\n  _s();\n\n  const [features, setFeatures] = useState(null);\n  useEffect(() => {\n    (async () => {\n      const res = await fetch(`${process.env.PUBLIC_URL}../../../../data/japan.json`);\n      const data = await res.json();\n      const {\n        features\n      } = topojson.feature(data, data.objects.japan);\n      setFeatures(features);\n    })();\n  }, []);\n\n  if (features == null) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChoroplethMap, {\n    features: features\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 10\n  }, this);\n}\n\n_s(ChoroplethMapPage, \"87MfhyococWanik7P11aI1QXipM=\");\n\n_c2 = ChoroplethMapPage;\n;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChoroplethMap\");\n$RefreshReg$(_c2, \"ChoroplethMapPage\");","map":{"version":3,"sources":["/Users/oda/Documents/development/Twitter-viz/src/components/Map/index.js"],"names":["React","useEffect","useState","d3","topojson","Japandata","transitions","ChoroplethMap","features","width","height","projection","geoMercator","scale","center","path","geoPath","color","scaleLinear","domain","extent","feature","properties","value","range","datas","map","i","data","lat","lng","ChoroplethMapPage","setFeatures","res","fetch","process","env","PUBLIC_URL","json","objects","japan"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,OAAOC,SAAP,MAAsB,oCAAtB;AACA,OAAOC,WAAP,MAAwB,sCAAxB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACtC,QAAMC,KAAK,GAAG,IAAd;AACA,QAAMC,MAAM,GAAG,GAAf;AACA,QAAMC,UAAU,GAAGR,EAAE,CAACS,WAAH,GAAiBC,KAAjB,CAAuB,IAAvB,EAA6BC,MAA7B,CAAoC,CAAC,SAAD,EAAY,QAAZ,CAApC,CAAnB;AACA,QAAMC,IAAI,GAAGZ,EAAE,CAACa,OAAH,GAAaL,UAAb,CAAwBA,UAAxB,CAAb;AACA,QAAMM,KAAK,GAAGd,EAAE,CACbe,WADW,GAEXC,MAFW,CAEJhB,EAAE,CAACiB,MAAH,CAAUZ,QAAV,EAAqBa,OAAD,IAAaA,OAAO,CAACC,UAAR,CAAmBC,KAApD,CAFI,EAGXC,KAHW,CAGL,CAAC,MAAD,EAAS,MAAT,CAHK,CAAd;AAKA,QAAMC,KAAK,GAAGpB,SAAd;AACA,sBACE;AAAK,IAAA,KAAK,EAAEI,KAAZ;AAAmB,IAAA,MAAM,EAAEC,MAA3B;AAAA,2BACE;AAAG,MAAA,SAAS,EAAC,oBAAb;AAAA,iBACGF,QAAQ,CAACkB,GAAT,CAAa,CAACL,OAAD,EAAUM,CAAV,kBACZ;AAEE,QAAA,CAAC,EAAEZ,IAAI,CAACM,OAAD,CAFT;AAGE,QAAA,IAAI,EAAEJ,KAAK,CAAC,QAAD,CAHb;AAIE,QAAA,MAAM,EAAC;AAJT,SACOU,CADP;AAAA;AAAA;AAAA;AAAA,cADD,CADH,EASGF,KAAK,CAACC,GAAN,CAAWC,CAAD,iBACT;AACE,QAAA,CAAC,EAAEhB,UAAU,CAAC,CAACc,KAAK,CAACG,IAAN,CAAWD,CAAX,EAAcE,GAAf,EAAmBJ,KAAK,CAACG,IAAN,CAAWD,CAAX,EAAcG,GAAjC,CAAD,CAAV,CAAkD,CAAlD,CADL;AAEE,QAAA,CAAC,EAAEnB,UAAU,CAAC,CAACc,KAAK,CAACG,IAAN,CAAWD,CAAX,EAAcE,GAAf,EAAmBJ,KAAK,CAACG,IAAN,CAAWD,CAAX,EAAcG,GAAjC,CAAD,CAAV,CAAkD,CAAlD,CAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,CATH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAjCD;;KAAMvB,a;AAkCN,eAAe,SAASwB,iBAAT,GAA6B;AAAA;;AAC1C,QAAM,CAACvB,QAAD,EAAWwB,WAAX,IAA0B9B,QAAQ,CAAC,IAAD,CAAxC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAW;AACV,YAAMgC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,UAAW,6BAA3B,CAAvB;AACA,YAAMT,IAAI,GAAG,MAAMK,GAAG,CAACK,IAAJ,EAAnB;AACA,YAAM;AAAE9B,QAAAA;AAAF,UAAeJ,QAAQ,CAACiB,OAAT,CAAiBO,IAAjB,EAAuBA,IAAI,CAACW,OAAL,CAAaC,KAApC,CAArB;AACAR,MAAAA,WAAW,CAACxB,QAAD,CAAX;AACD,KALD;AAMD,GAPQ,EAOP,EAPO,CAAT;;AAQA,MAAIA,QAAQ,IAAI,IAAhB,EAAsB;AACpB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,sBAAO,QAAC,aAAD;AAAe,IAAA,QAAQ,EAAEA;AAAzB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAduBuB,iB;;MAAAA,iB;AAcvB","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport Japandata from \"../../../public/data/japanpos.json\";\nimport transitions from \"@material-ui/core/styles/transitions\";\n\nconst ChoroplethMap = ({ features }) => {\n  const width = 2000;\n  const height = 800;\n  const projection = d3.geoMercator().scale(1500).center([139.69167, 35.68944]);\n  const path = d3.geoPath().projection(projection);\n  const color = d3\n    .scaleLinear()\n    .domain(d3.extent(features, (feature) => feature.properties.value))\n    .range([\"#ccc\", \"#f00\"]);\n  \n  const datas = Japandata;\n  return (\n    <svg width={width} height={height}>\n      <g transform=\"translate(500,100)\">\n        {features.map((feature, i) => (\n          <path\n            key={i}\n            d={path(feature)}\n            fill={color(\"000000\")}\n            stroke=\"white\"\n          />\n        ))}\n        {datas.map((i) => (\n          <text \n            x={projection([datas.data[i].lat,datas.data[i].lng])[0]}\n            y={projection([datas.data[i].lat,datas.data[i].lng])[1]}\n            >\n            テスト\n            </text>\n        ))}\n      </g>\n    </svg>\n  );\n};\nexport default function ChoroplethMapPage() {\n  const [features, setFeatures] = useState(null);\n  useEffect(() => {\n    (async() => {\n      const res = await fetch(`${process.env.PUBLIC_URL}../../../../data/japan.json`)\n      const data = await res.json()\n      const { features } = topojson.feature(data, data.objects.japan);\n      setFeatures(features);\n    })()\n  },[])\n  if (features == null) {\n    return <p>loading</p>;\n  }\n  return <ChoroplethMap features={features} />;\n};"]},"metadata":{},"sourceType":"module"}