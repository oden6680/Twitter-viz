{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/oda/Documents/development/Twitter-viz/src/components/Map/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\n\nconst ChoroplethMap = ({\n  features\n}) => {\n  const width = 2000;\n  const height = 2000;\n  const projection = d3.geoMercator().scale(3000).center([139.69167, 35.68944]);\n  const path = d3.geoPath().projection(projection);\n  const color = d3.scaleLinear().domain(d3.extent(features, feature => feature.properties.value)).range([\"#ccc\", \"#f00\"]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: width,\n    height: height,\n    children: /*#__PURE__*/_jsxDEV(\"g\", {\n      children: features.map((feature, i) => /*#__PURE__*/_jsxDEV(\"path\", {\n        d: path(feature),\n        fill: color(feature.properties.value),\n        stroke: \"white\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ChoroplethMap;\nexport default function ChoroplethMapPage() {\n  _s();\n\n  const [features, setFeatures] = useState(null);\n  useEffect(() => {\n    (async () => {\n      const res = await fetch(`${process.env.PUBLIC_URL}../../../../data/japan.json`);\n      const data = await res.json();\n      const {\n        features\n      } = topojson.feature(data, data.objects.japan);\n      setFeatures(features);\n    })();\n  }, []);\n\n  if (features == null) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChoroplethMap, {\n    features: features\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, this);\n}\n\n_s(ChoroplethMapPage, \"87MfhyococWanik7P11aI1QXipM=\");\n\n_c2 = ChoroplethMapPage;\n;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChoroplethMap\");\n$RefreshReg$(_c2, \"ChoroplethMapPage\");","map":{"version":3,"sources":["/Users/oda/Documents/development/Twitter-viz/src/components/Map/index.js"],"names":["React","useEffect","useState","d3","topojson","ChoroplethMap","features","width","height","projection","geoMercator","scale","center","path","geoPath","color","scaleLinear","domain","extent","feature","properties","value","range","map","i","ChoroplethMapPage","setFeatures","res","fetch","process","env","PUBLIC_URL","data","json","objects","japan"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;;AACA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACtC,QAAMC,KAAK,GAAG,IAAd;AACA,QAAMC,MAAM,GAAG,IAAf;AACA,QAAMC,UAAU,GAAGN,EAAE,CAACO,WAAH,GAAiBC,KAAjB,CAAuB,IAAvB,EAA6BC,MAA7B,CAAoC,CAAC,SAAD,EAAY,QAAZ,CAApC,CAAnB;AACA,QAAMC,IAAI,GAAGV,EAAE,CAACW,OAAH,GAAaL,UAAb,CAAwBA,UAAxB,CAAb;AACA,QAAMM,KAAK,GAAGZ,EAAE,CACba,WADW,GAEXC,MAFW,CAEJd,EAAE,CAACe,MAAH,CAAUZ,QAAV,EAAqBa,OAAD,IAAaA,OAAO,CAACC,UAAR,CAAmBC,KAApD,CAFI,EAGXC,KAHW,CAGL,CAAC,MAAD,EAAS,MAAT,CAHK,CAAd;AAIA,sBACE;AAAK,IAAA,KAAK,EAAEf,KAAZ;AAAmB,IAAA,MAAM,EAAEC,MAA3B;AAAA,2BACE;AAAA,gBACGF,QAAQ,CAACiB,GAAT,CAAa,CAACJ,OAAD,EAAUK,CAAV,kBACZ;AAEE,QAAA,CAAC,EAAEX,IAAI,CAACM,OAAD,CAFT;AAGE,QAAA,IAAI,EAAEJ,KAAK,CAACI,OAAO,CAACC,UAAR,CAAmBC,KAApB,CAHb;AAIE,QAAA,MAAM,EAAC;AAJT,SACOG,CADP;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAvBD;;KAAMnB,a;AAwBN,eAAe,SAASoB,iBAAT,GAA6B;AAAA;;AAC1C,QAAM,CAACnB,QAAD,EAAWoB,WAAX,IAA0BxB,QAAQ,CAAC,IAAD,CAAxC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAW;AACV,YAAM0B,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,UAAW,6BAA3B,CAAvB;AACA,YAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAJ,EAAnB;AACA,YAAM;AAAE3B,QAAAA;AAAF,UAAeF,QAAQ,CAACe,OAAT,CAAiBa,IAAjB,EAAuBA,IAAI,CAACE,OAAL,CAAaC,KAApC,CAArB;AACAT,MAAAA,WAAW,CAACpB,QAAD,CAAX;AACD,KALD;AAMD,GAPQ,EAOP,EAPO,CAAT;;AAQA,MAAIA,QAAQ,IAAI,IAAhB,EAAsB;AACpB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,sBAAO,QAAC,aAAD;AAAe,IAAA,QAAQ,EAAEA;AAAzB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAduBmB,iB;;MAAAA,iB;AAcvB","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nconst ChoroplethMap = ({ features }) => {\n  const width = 2000;\n  const height = 2000;\n  const projection = d3.geoMercator().scale(3000).center([139.69167, 35.68944]);\n  const path = d3.geoPath().projection(projection);\n  const color = d3\n    .scaleLinear()\n    .domain(d3.extent(features, (feature) => feature.properties.value))\n    .range([\"#ccc\", \"#f00\"]);\n  return (\n    <svg width={width} height={height}>\n      <g>\n        {features.map((feature, i) => (\n          <path\n            key={i}\n            d={path(feature)}\n            fill={color(feature.properties.value)}\n            stroke=\"white\"\n          />\n        ))}\n      </g>\n    </svg>\n  );\n};\nexport default function ChoroplethMapPage() {\n  const [features, setFeatures] = useState(null);\n  useEffect(() => {\n    (async() => {\n      const res = await fetch(`${process.env.PUBLIC_URL}../../../../data/japan.json`)\n      const data = await res.json()\n      const { features } = topojson.feature(data, data.objects.japan);\n      setFeatures(features);\n    })()\n  },[])\n  if (features == null) {\n    return <p>loading</p>;\n  }\n  return <ChoroplethMap features={features} />;\n};"]},"metadata":{},"sourceType":"module"}